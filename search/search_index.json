{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Gopher's burrow!","text":""},{"location":"#whoami","title":"$ whoami","text":"<p> I am a 22 year old software developer who loves to tinker around with technology and learn new things. If I am not writing code, I am either experimenting in my homelab (the networking and server kind, not that kind you silly goose), taking longs walks or reading. </p>"},{"location":"#why-the-blog","title":"Why the blog?","text":"<p>The biggest reason why I created this blog is because I want to document the things I'm doing and share them publicly, in hopes that it will help me solidify my knowledge, and that you, the reader, can learn something from them. I will be writing about anything technology related, from web development to reverse engineering and hacking around with C/C++. </p> <p>What does the title mean?</p> <p>My favourite programming language is Go, so naturally I like the mascot, Gopher. Since real life gophers dig tunnels and live inside them (burrows), I decided to call the blog \"Gopher's Burrow\".</p> <p>Warning</p> <p>Everything you see in this blog is strictly there for educational purposes. I do not condone the use of anything you learn from this blog for anything malicious. If you do something that gets you in trouble, it is not my responsibility.</p>"},{"location":"#shoutout","title":"Shoutout","text":"<p>A massive shoutout goes to Crow for inspiring me to start this blog. Check out his YouTube Channel for some amazing malware development content.</p>"},{"location":"binary_exploatation/buffer_overflow/","title":"Buffer Overflow*","text":"<p>Coming soon!</p>"},{"location":"devops/nomad/nomad_tutorial/","title":"Introduction","text":"<p>In this post you will learn how to deploy highly available docker containers, load balanced with Traefik which can be accessed through your domain name (TLS included), from start to finish. We will be deploying traefik/whoami in order to keep the tutorial simple, however, this guide will work for any docker image.</p>"},{"location":"devops/nomad/nomad_tutorial/#setup","title":"Setup","text":"<p>Note</p> <p>If you don't have HashiCorp Nomad installed, please follow the official installation guide to install it.</p> <p>Before we start deploying our docker container, we first need to set up our Nomad infrastructure.</p> <p>It is recommended to run Nomad with at least 3 nodes, one of them running in Server mode and the other two running in Client mode.</p> <ul> <li>Server  is responsible for assigning jobs to Clients.</li> <li>Clients are responsible for running jobs/containers.</li> </ul> <p>Note</p> <p>This tutorial assumes that you have 3 linux servers available, because we will be deploying an infrastructure as described above (1 server for Server mode, and the other 2 servers for Client mode).</p>"},{"location":"devops/nomad/nomad_tutorial/#server-mode-setup","title":"Server mode setup","text":"<p>In order to set up Nomad to run in Server mode, ssh into the server you want to use for Server mode and make sure the <code>/etc/nomad.d/nomad.hcl</code> config file looks like this: <pre><code>datacenter = \"dc1\"\ndata_dir  = \"/opt/nomad/data\"\nbind_addr = \"0.0.0.0\"\n\nserver {\n  # license_path is required as of Nomad v1.1.1+\n  #license_path = \"/opt/nomad/license.hclic\"\n  enabled          = true\n  # number of client servers\n  bootstrap_expect = 2\n}\n</code></pre> Now, in order to run Nomad, execute this command: <pre><code>sudo nomad agent -server -config=nomad.hcl\n</code></pre> Nomad should now be running in Server mode.</p>"},{"location":"devops/nomad/nomad_tutorial/#client-mode-setup","title":"Client mode setup","text":"<p>In order to set up Nomad to run in Client mode, ssh into the two of your servers you want to use as Clients and make sure their <code>/etc/nomad.d/nomad.hcl</code> config file looks like this (make sure you use the address of your own Server node!): <pre><code>datacenter = \"dc1\"\ndata_dir  = \"/opt/nomad/data\"\nbind_addr = \"0.0.0.0\"\n\nclient {\n  enabled = true\n  # address of the Server node\n  servers = [\"192.168.0.79\"]\n}\n</code></pre> Now you can run Nomad in Client mode: <pre><code>sudo nomad agent -client -config=nomad.hcl\n</code></pre></p> <p>Warning</p> <p>Make sure you do this for every linux server you are planning on using as a Client.</p>"},{"location":"devops/nomad/nomad_tutorial/#webui","title":"WebUI","text":"<p>Once Nomad is running, you can visit the Web interface at http://[ip_of_your_server_or_client]:4646</p>"},{"location":"devops/nomad/nomad_tutorial/#deploying-the-container","title":"Deploying the container","text":"<p>Now that our servers are ready, we can start running jobs with Nomad. In this example, we are going to deploy 5 instances of the traefik/whoami container, because we want our containers to be load balanced and highly available. First, create a file named <code>whoami.nomad</code> (it doesn't matter where you create it) and write this job specification: <pre><code>job \"whoami\" {\n  datacenters = [\"dc1\"]\n\n  type = \"service\"\n\n  group \"demo\" {\n    count = 5\n\n    network {\n       port \"http\" {\n         to = 80\n       }\n    }\n\n    service {\n      name = \"whoami-demo\"\n      port = \"http\"\n      provider = \"nomad\"\n\n      tags = [\n        \"traefik.enable=true\",\n        \"traefik.http.routers.whoami.rule=Host(`whoami.damirhadzagic.com`)\",\n\n        ### Tags for TLS\n        \"traefik.http.middlewares.myredirect.redirectscheme.scheme=https\",\n        \"traefik.http.routers.whoami.middlewares=myredirect\",\n        \"traefik.http.routers.whoami.entrypoints=web\",\n        \"traefik.http.routers.whoami-secure.rule=Host(`whoami.damirhadzagic.com`)\",\n        \"traefik.http.routers.whoami-secure.entrypoints=websecure\",\n        \"traefik.http.routers.whoami-secure.tls.certresolver=myhttpchallenge\",\n        \"traefik.http.routers.whoami-secure.tls=true\"\n      ]\n    }\n\n    task \"server\" {\n      env {\n        WHOAMI_PORT_NUMBER = \"${NOMAD_PORT_http}\"\n      }\n\n      driver = \"docker\"\n\n      config {\n        image = \"traefik/whoami\"\n        ports = [\"http\"]\n      }\n    }\n  }\n}\n</code></pre> The job specification above tells Nomad that we want to run 5 containers using the traefik/whoami image. We have told it which internal port to use, which is in our case port 80. We did not set up which port it should bind to because Nomad will do that dynamically for us. We have also set up tags for traefik, which we will deploy later. Make sure you use your own domain name.\\ Now that our job specification is ready, we can run it: <pre><code>nomad job run whoami.nomad\n</code></pre></p> <p>While the job is running, you can go to the WebUI and watch as the containers are being deployed (Jobs -&gt; whoami). If everything has gone well, you should see this:</p> <p></p> <p>If you want to, you can run <code>docker ps</code> on your Client machines, and you should be able to see the containers we just deployed.</p> <p> </p> <p>As you can see, Nomad deployed 2 containers on my lab1 VM, and 3 containers on my lab2 VM. Pretty cool, right?</p> <p>Now that we have deployed our containers, it's time to load balance them via Traefik.</p>"},{"location":"devops/nomad/nomad_tutorial/#deploying-traefik","title":"Deploying Traefik","text":"<p>To deploy Traefik, all we have to do is create another job for Nomad to run. Create a file called <code>whoami.nomad</code> and write this job specification: <pre><code>job \"traefik\" {\n  datacenters = [\"dc1\"]\n  type        = \"service\"\n\n  group \"traefik\" {\n    count = 1\n\n    network {\n      port \"http\" {\n         static = 80\n      }\n\n      port \"https\" {\n         static = 443\n      }\n\n      port \"admin\" {\n         static = 8080\n      }\n    }\n\n    service {\n      name = \"traefik-http\"\n      provider = \"nomad\"\n      port = \"http\"\n    }\n\n    task \"server\" {\n      driver = \"docker\"\n      config {\n        image = \"traefik:2.9\"\n        ports = [\"admin\", \"http\", \"https\"]\n        args = [\n          \"--api.dashboard=true\",\n          \"--api.insecure=true\", ### For Test only, please do not use that in production\n          \"--entrypoints.web.address=:${NOMAD_PORT_http}\",\n          \"--entrypoints.traefik.address=:${NOMAD_PORT_admin}\",\n          \"--entrypoints.websecure.address=:${NOMAD_PORT_https}\",\n          \"--certificatesresolvers.myhttpchallenge.acme.httpchallenge=true\",\n          \"--certificatesresolvers.myhttpchallenge.acme.httpchallenge.entrypoint=web\",\n          \"--certificatesresolvers.myhttpchallenge.acme.email=example@email.com\",\n          \"--certificatesresolvers.myhttpchallenge.acme.storage=/letsencrypt/acme.json\",\n          \"--providers.nomad=true\",\n          \"--providers.nomad.endpoint.address=http://192.168.0.79:4646\" ### IP to your nomad server\n        ]\n\n       volumes = [\n         \"letsencrypt:/letsencrypt\"\n       ]\n      }\n    }\n  }\n}\n</code></pre> Make sure you use your own email address and the IP address of your own Nomad node running in Server mode.\\ Now deploy traefik by running the following command: <pre><code>nomad job run traefik.nomad\n</code></pre> Nomad will pick a server to run traefik on, and once it successfully deploys it, visit the dashboard on port 8080. If you want to find out where Nomad deployed traefik, go to Nomad's WebUI -&gt; Jobs -&gt; traefik -&gt; Recent Allocations -&gt; Click on the most recent allocation -&gt; Scroll until you see Ports:</p> <p></p> <p>In my case Nomad deployed traefik on 192.168.0.42 (which is my lab2 VM), so let's visit the dashboard at http://192.168.0.42:8080:</p> <p></p> <p>The dashboard loaded successfully which is a good sign, let's now click on the HTTP tab so we can check if traefik wired everything up correctly. Once you've clicked on the HTTP tab, click on the router that's marked with the green TLS icon:</p> <p></p> <p>Now click on the whoami-demo service:</p> <p></p> <p>On the right you can see our 5 containers we deployed earlier, this means that traefik has managed to successfully \"wire\" everything up:</p> <p></p>"},{"location":"devops/nomad/nomad_tutorial/#testing","title":"Testing","text":"<p>Now it's time to test if everything works. Head on over to https://yourdomain.com (make sure port 443 is open!) and you should see something like this:  Look at the Hostname field at the top, every time you refresh the page its value will change, which means that traefik is routing requests to different containers, which is exactly what we want.</p>"},{"location":"devops/nomad/nomad_tutorial/#the-end","title":"The End","text":"<p>This is it! Congratulations, you have successfully deployed 5 instances of a container, on two different servers, load balanced with traefik, with TLS as well!</p>"}]}